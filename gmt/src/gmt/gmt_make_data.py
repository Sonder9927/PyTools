from src import info_filter

from pathlib import Path
import pandas as pd
import pygmt


def gmt_blockmean_surface_grdsample(
    data, bm_output, sf_output, region, *, spacing=0.01, outgrid=""
):
    # blockmean
    pygmt.blockmean(
        data=data,
        outfile=bm_output,
        region=region,
        spacing=0.5,
    )
    # surface
    pygmt.surface(
        data=bm_output,
        outgrid=sf_output,
        region=region,
        spacing=0.5,
    )
    if outgrid:
        # grdsample
        pygmt.grdsample(
            grid=sf_output,
            spacing=spacing,
            outgrid=outgrid,
        )


def make_vel(data, outgrid, region, preffix="") -> str:
    bm_out = "temp/bm_temp"
    sf_grd = "temp/sf.grd"
    gmt_blockmean_surface_grdsample(data, bm_out, sf_grd, region, outgrid=outgrid)

    pre_sf = Path(sf_grd)
    if preffix:
        pre_sf = pre_sf.parent / f"{preffix}_{pre_sf.name}"
        Path(sf_grd).rename(pre_sf)

    return str(pre_sf)


def make_diff(ant, tpwt, outgrid, region):
    ant = pygmt.grd2xyz(ant)
    tpwt = pygmt.grd2xyz(tpwt)

    # make diff
    diff = tpwt
    diff.z = (tpwt.z - ant.z) * 1000
    bm_out = "temp/tomo_diff.xyz"
    sf_out = "temp/temp.grd"
    gmt_blockmean_surface_grdsample(diff, bm_out, sf_out, region, outgrid=outgrid)


def get_info(grd_file: str, ndigits: int = 1) -> list[float]:
    # pick up both min and max vel of grd_file
    grd = pd.read_csv(
        grd_file,
        usecols=[2],
        names=["vel"],
        index_col=None,
        header=None,
        delim_whitespace=True,
    )

    series = [min(grd.vel), max(grd.vel)]
    min_vel = int(pow(10, ndigits) * series[0] - 1) / pow(10, ndigits)
    max_vel = int(pow(10, ndigits) * series[1] + 2) / pow(10, ndigits)

    return [min_vel, max_vel]


###############################################################################


def make_grd(ant, tpwt, region, cptfile, ant_grd, tpwt_grd, diff_grd):
    # pick up information of series for `makecpt`
    series = get_info(tpwt) + get_info(ant)
    series = [min(series), max(series), 0.1]
    # make cpt file
    pygmt.makecpt(
        cmap="seis",
        series=series,
        background="",
        continuous="",
        output=cptfile,
    )

    # make vel grid of ant and get vel grid generated by `surface` for `make_diff`
    ant_sf = make_vel(ant, ant_grd, region, "ant")
    # make vel grid of tpwt and get vel grid generated by `surface` for `make_diff`
    tpwt_sf = make_vel(tpwt, tpwt_grd, region, "tpwt")

    # make diff grid
    make_diff(ant_sf, tpwt_sf, diff_grd, region)


def make_topo(topo, region, outfile):
    TOPO_GRD = "temp/topo.grd"
    TOPO_GRD2 = "temp/topo.grd2"
    # grdcut
    pygmt.grdcut(
        grid=topo,
        region=region,
        outgrid=TOPO_GRD,
    )
    # grdsample
    pygmt.grdsample(
        grid=TOPO_GRD,
        outgrid=TOPO_GRD2,
        region=region,
        spacing=0.01,
    )
    # grdgradient
    pygmt.grdgradient(
        grid=TOPO_GRD2,
        outgrid=outfile,
        azimuth=45,
        normalize="t",
        verbose="",
    )


def diff_inner(grdfile: str, region, sta):
    # cut vel_diff_grd by the boundary of stations
    data = pygmt.grd2xyz(grdfile)

    boundary = info_filter.points_boundary(sta)
    data_inner = info_filter.points_inner(data, boundary=boundary)

    return pygmt.xyz2grd(data=data_inner, region=region, spacing=0.01)
