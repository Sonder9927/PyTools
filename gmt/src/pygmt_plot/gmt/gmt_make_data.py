from pathlib import Path

import pandas as pd
import pygmt


def diff_make(ant, tpwt, region, cptfile, grds):
    pers_series = {
        "20": [3.45, 3.61, 0.01],
        "25": [3.63, 3.76, 0.01],
        "30": [3.7, 3.85, 0.01],
    }
    per = Path(ant).stem.split("_")[-1]
    series = pers_series.get(per)
    # make cpt file for tomo of vel of ant and tpwt
    cmap = "src/txt/cptfiles/Vc_1.8s.cpt"
    pygmt.makecpt(cmap=cmap, series=series, continuous=True, output=cptfile)

    # make vel grid of ant and get vel grid generated by `surface`
    ant_sf = tomo_grid_data(ant, grds["ant"], region, preffix="ant")
    # make vel grid of tpwt and get vel grid generated by `surface`
    tpwt_sf = tomo_grid_data(tpwt, grds["tpwt"], region, preffix="tpwt")

    # make diff grid
    ant = pygmt.grd2xyz(ant_sf)
    tpwt = pygmt.grd2xyz(tpwt_sf)
    merged = pd.merge(ant, tpwt, on=["x", "y"], how="left")
    merged["z"] = (merged["z_x"] - merged["z_y"]) * 1000
    diff = merged[["x", "y", "z"]]
    tomo_grid_data(diff, grds["diff"], region)
    return diff


def make_topos(
    idt,
    region,
    *,
    data="src/txt/ETOPO1.grd",
    normalize="t",
    resolution=None,
    cmap="grayC",
    series=None,
):
    if series is None:
        series = [-100, 2000, 200]
    temp = Path("temp")
    ctopo = str(temp / f"topo_{cmap}.cpt")
    pygmt.makecpt(
        cmap=cmap,
        series=series,
        continuous=True,
        output=ctopo,
    )
    grd = temp / f"topo_{idt}.grd"
    gra = temp / f"topo_{idt}.gradient"
    topos = dict(
        zip(["grd", "gra", "cpt", "region"], [grd, gra, ctopo, region])
    )
    if Path(gra).exists():
        return topos
    TOPO_CUT = "temp/topo_cut.grd"
    TOPO_SAMPLE = "temp/topo_sample.grd"
    if resolution:
        data = pygmt.datasets.load_earth_relief(
            resolution=resolution, region=region, registration="gridline"
        )
    # grdcut
    pygmt.grdcut(
        grid=data,
        region=region,
        outgrid=TOPO_CUT,
    )
    # grdsample
    pygmt.grdsample(
        grid=TOPO_CUT,
        outgrid=TOPO_SAMPLE,
        region=region,
        spacing=0.01,
        # translate=True,
    )
    TOPO_GRA = "temp/topo.gradient"
    # grdgradient
    pygmt.grdgradient(
        grid=TOPO_SAMPLE,
        outgrid=TOPO_GRA,
        azimuth=45,
        normalize=normalize,
        verbose="w",
    )
    Path(TOPO_SAMPLE).rename(grd)
    Path(TOPO_GRA).rename(gra)
    return topos


###############################################################################


def tomo_grid_data(data, outgrid, region, *, bm=None, preffix="", **spacings):
    bm_out = bm or "temp/bm.xyz"
    sf_grd = "temp/sf.grd"
    gmt_blockmean_surface_grdsample(
        data, bm_out, sf_grd, region, spacings=spacings, outgrid=outgrid
    )

    pre_sf = Path(sf_grd)
    if preffix:
        pre_sf = pre_sf.parent / f"{preffix}_{pre_sf.name}"
        Path(sf_grd).rename(pre_sf)

    return str(pre_sf)


def gmt_blockmean_surface_grdsample(
    data, bm_output, sf_output, region, *, outgrid=None, spacings=None
):
    if spacings is None:
        spacings = {}
    # blockmean
    pygmt.blockmean(
        data=data,
        outfile=bm_output,
        region=region,
        spacing=spacings.get("blockmean") or 0.5,
    )
    # surface
    pygmt.surface(
        data=bm_output,
        outgrid=sf_output,
        region=region,
        spacing=spacings.get("surface") or 0.5,
    )
    if outgrid is not None:
        # grdsample
        pygmt.grdsample(
            grid=sf_output,
            spacing=spacings.get("grdsample") or 0.01,
            outgrid=outgrid,
        )


def get_info(grd_file: str, ndigits: int = 1) -> list[float]:
    # pick up both min and max vel of grd_file
    grd = pd.read_csv(
        grd_file,
        usecols=[2],
        names=["vel"],
        index_col=None,
        header=None,
        delim_whitespace=True,
    )

    series = [min(grd.vel), max(grd.vel)]
    min_vel = int(pow(10, ndigits) * series[0] - 1) / pow(10, ndigits)
    max_vel = int(pow(10, ndigits) * series[1] + 2) / pow(10, ndigits)

    return [min_vel, max_vel]


def sta_clip(region, *, grid=None, data=None, output=None):
    hull = "src/txt/sta_hull.nc"
    if grid is not None:
        data = pygmt.grd2xyz(grid)
    elif data is not None:
        data = data
    else:
        raise KeyError("Input filename to `grid` or dataframe to `data`")
    clip_data = pygmt.select(data, F=hull)
    if output in ["grd", "grid"]:
        return pygmt.xyz2grd(data=clip_data, region=region, spacing=0.01)
    return clip_data


# def sta_clip(grdfile: str, region, sta):
#     # # TODO use pygmt.select
#     # sta_boundary = info_filter.points_boundary(sta)
#     # grd = pygmt.select(data=vel_grd, polygon=sta_boundary)
#     # cut vel_diff_grd by the boundary of stations
#     data = pygmt.grd2xyz(grdfile)

#     boundary = info_filter.points_boundary(sta, clock=True)
#     data_inner = info_filter.points_inner(data, boundary=boundary)

#     return pygmt.xyz2grd(data=data_inner, region=region, spacing=0.01)
